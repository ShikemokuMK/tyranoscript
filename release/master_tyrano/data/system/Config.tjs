// Config.tjs - ティラノスクリプト 設定
// Copyright (C) 2012-2021 ShikemokuMK

;global.config_version = "6.00"; // この行を消さないでください

// ティラノスクリプトの基本設定になります。

// このファイル内で設定できる項目は、すべて
// ;設定名 = 値;
// の形式になっています。
// 「追加の設定」を除いて、設定は各項目につき１行で記述する必要があります。


//------------------------------------------------------- 全体の設定 -----


// ◆ タイトル
// ウィンドウのキャプション(タイトル)および
// ブラウザの場合は、タイトルに指定されます
;System.title = "ティラノスクリプト";


// ◆ プロジェクト一意の識別名称　ティラノスクリプト独自設定
// プロジェクト固有の文字列を指定してください。特に同一ドメイン上にプロジェクトを配置する場合は必ず指定してください
;projectID = tyranoproject;

// ◆ リリースバージョンを数値で指定します。全角・英数字は使用できません。
// パッチ機能において重要な役割を果たします。パッチファイルで指定されたバージョンがこの数値より大きい場合はパッチが適応されます。
// ゲームをアップデートした場合、必ず以下の数値を上げておくことをオススメします。
;game_version = 0.0;

// 画面比率を固定にするか否か
// "fit"を指定すると、プレイヤーが閲覧している端末に合わせて自動的に調整されますが、縦横比率は保たれません。
// "fix"を指定すると縦横比率は保たれます。ただし、端末によっては何も表示されない空白領域ができてしまいます。
// "default"を指定すると縦横比の調整は一切行われません
;ScreenRatio = fix;

//パッチファイルが配置されている場合、起動時に自動的に反映するか否か。
//trueを指定すると実行ファイルと同一フォルダにtpatchファイルが存在する場合反映してから起動します。
//（MacOS Sierra 以降の場合は home/ユーザー名/_TyranoGameData/　以下）
//falseを指定した場合 起動後に[apply_local_patch]タグを使って反映することもできます。
;patch_apply_auto = true;

// 画面をセンタリングするか否か
// アプリ化などでゲーム画面が画面外に出てしまうような場合にfalseを指定すると改善する場合があります。
;ScreenCentering = true;

// カメラ機能を使えるようにするかを設定
// trueで有効　false で無効です。
;useCamera = true;

// 3D機能を利用できるようにする
// trueで有効　false で無効です。
// 有効にすると起動時間が長くなりますので、必要ない場合はfalseが推奨です。
;use3D = false;

// ◆ タグのパラメータの値に含まれる空白をどのレベルで保持するか（1、2、3のいずれかで指定）
// 1 : 空白をまったく保持しません（すべての空白を削除します）
// 2 : 内部の空白だけ保持します（両端の空白を削除します）
// 3 : すべての空白を保持します
// たとえば [bg storage=" my room.jpg  "] というタグのstorageパラメータの値は、
// それぞれのレベルで次のように解釈されます。
// 1 : "myroom.jpg"
// 2 : "my room.jpg"
// 3 : " my room.jpg  "
// もし既存のゲームプロジェクトのティラノスクリプト本体（V514以前）をV515以降のバージョンで上書きしたときに
// それまで正常に動作していたゲームが動作しなくなった場合は、ここを 1 に変更してみてください。
;KeepSpaceInParameterValue = 2;

//-------------------------------------------- ウィンドウや動作の設定 -----

// ◆ 画面サイズ
// scWidth に画面の幅、scHeight に画面の高さをピクセル単位で指定します。

;scWidth = 1280;
;scHeight = 720;

// ◆ チャットノベル形式
//　V5より。trueにするとチャットストーリー形式でゲームがプレイできます。
;vchat = false;

// ◆ チャットノベル形式のメニュー
// チャットノベルで便利なセーブやロードなどを備えたメニューを表示するか否か。
;vchatMenuVisible = false;

// ◆ 文字表示スピード
// delay で指定した場合はその値が優先されます。resetdelayで元に戻ります
;chSpeed = 30;

// ◆ 文字表示スピード (ミリ秒/文字)（未実装）
;chSpeeds.fast = 10; // 「高速」文字表示スピード
;chSpeeds.normal = 30; // 「普通」文字表示スピード
;chSpeeds.slow = 50; // 「遅い」文字表示スピード

// ◆ 文字表示の演出
// テキストの表示演出を指定できます。noneを指定すると演出が無効になります。
// 指定できる名前
// fadeIn/fadeInDown/fadeInLeft/fadeInRight/fadeInUp/rotateIn/zoomIn/slideIn/bounceIn/vanishIn/puffIn/rollIn/none
;defaultChEffect = none;

// ◆ 文字表示の演出スピード
// defaultChAnimの演出が有効な場合、演出にかける時間を指定します。sは秒を表します。
;defaultChEffectSpeed = 0.2s;


// ◆ スキップスピード (ミリ秒/文字)
//スキップ時にどれくらいの早さで進むかを設定できる
;skipSpeed = 30;

// ◆ スキップの時、演出もスキップするかを設定できる
//trueで有効。背景変更・キャラクター表示・非表示の速度をが短くなります。
;skipEffectIgnore = true;


// ◆ オートスピード
//autoSpeedはオート時にどれくらいの早さで進むかをミリ秒設定できる
//autoClickStop は 画面クリックでオートが停止するかどうかを設定。trueを指定すると、クリックでオートが停止
;autoSpeed = 1300;
;autoClickStop = true;

//オート時の待ち時間を文字数に応じて調整できます。１文字あたり指定したミリ秒分がautoSpeedの時間に追加された時間待ちます
//例えば10文字のテキストだった場合、60*10 = 600ms + autoSpeedの値
;autoSpeedWithText = 60;


// ◆ マウスカーソル
// マウスカーソルを指定します。画像ファイルも指定することができます
// defaultを指定すると、通常の矢印になります。
// 独自の画像カーソルを使用したい場合はimageフォルダに配置した上で、ファイル名を指定してください
// [cursor]タグを使って、ゲーム中に変更することもできます。

;cursorDefault = default; // 通常のマウスカーソル

// ◆ デフォルトのサウンド・動画フォーマットを指定
// V5以降は未使用。特に変更する必要はありません。

;mediaFormatDefault = ogg;

// ◆ BGMの音量 0 〜 100 で指定します。
;defaultBgmVolume = 100;

// ◆ SEの音量 0 〜 100 で指定します。
;defaultSeVolume = 100;

// ◆ 動画の音量 0 〜 100 で指定します。
;defaultMovieVolume = 100;

// ◆ BGMで使用するスロット数をあらかじめ定義します。
// こちらは、スマートフォンブラウザで適切に音を再生したい場合は必須です
;defaultBgmSlotNum = 1;

// ◆ サウンドで使用するスロット数をあらかじめ定義します。
// こちらは、スマートフォンブラウザで適切に音を再生したい場合は必須です
;defaultSoundSlotNum = 3;



// ◆ コンフィグ（メニュー）機能表示
// セーブ・ロードやタイトルに戻るといった一連の機能を表示するかを指定します
;configVisible = true;  //コンフィグアイコンを表示
;configLeft    = -1     //コンフィグアイコンの左位置を指定できます。-1の場合は画面右下
;configTop     = -1     //コンフィグアイコンの上位置を指定できます。-1の場合は画面右下

// ◆ セーブの方式を指定
//注意：途中でセーブ方式を変更することはできません。
//webstorage :WebStorage領域に保存します。あらゆる環境で利用できますが、セーブデータが大きくなりすぎた場合に保存できなくなります
//webstorage_compress :圧縮を施したうえで、WebStorage領域に保存します。セーブ・ロードに時間がかかりますが、保存できるデータ量は大きく増加します
//file : セーブデータを sav ファイルとして書き出します。この場合PCゲームにしか利用できません。セーブデータを移動したり、容量制限の心配が不要です。

;configSave     = webstorage

// セーブ・ロード時にサムネを表示したくない場合はこちらをfalseに設定してください
// 一部古い機種でセーブ機能が動作しない場合などにサムネを表示しないことで解決しないことがあります。
;configThumbnail    = true;

// サムネイル画像を使用する場合の画質を指定できます。
// ブラウザやスマホ対応で、WebStorage領域を使用する場合は low か middle がおすすめです。
// low:最低画質(jpeg)　middle:中画質(jpeg)  high:最高画質(png)
;configThumbnailQuality = middle ;

// サムネイル画像を使用する場合の画像サイズを指定できます。
// WebStorage領域を使用する場合は 数字を小さくしてセーブデータの容量を少なくするのがおすすめです。
// 0.01 ～ 1.0 (画面サイズそのまま)
;configThumbnailScale = 0.3;

// セーブスロットの数を指定できます。
// ただし、configSaveの形式がwebstorageの場合、５個程度に抑えておかないと容量不足でセーブできなくなる可能性があります。
// スロット数はゲーム開始後は変更できません。その場合、セーブデータをすべて消した上で再度開始する必要があります。
;configSaveSlotNum = 5;

// セーブデータに表示される日時のフォーマットを指定できます。
// (設定例)                  (結果例)
// yyyy/M/d h:mm:ss     →   2022/1/1 0:00:00
// yyyy/MM/dd hh:mm:ss  →   2022/01/01 00:00:00
// yyyy年M月d日 h時mm分    →   2022年1月1日 0時00分
;configSaveDateFormat = yyyy/M/d h:mm:ss;


// ◆ セーブデータ移動の可否を設定します。（PCゲーム限定）
// 他人のセーブデータ取得し配置することで、ゲームを改造するチート行為は危険です。
// ティラノスクリプトではセーブデータの改変を検知するとゲームの起動を停止する機能が備わっています。
// ただし、頻繁にアップデートを行うケース等において、この機能が誤検知してしまうケースがまれに発生します。
// その場合、ゲーム本体のインストール場所（フォルダ名）を変更することで回避できます。
// trueを指定すると、セーブデータの移動と上書きが可能になりますが、信頼できない場所からセーブデータを取得し配置しないような注意喚起も合わせてお願い致します。
;configSaveOverwrite = false


// ◆ バックログ機能
// バックログ機能用にテキストの最大保持数を保存できます。
// 保存されたデータはtf.system.backlog に配列として格納されます。
// 0の場合、保存を行いません。
;maxBackLogNum = 50;

// ◆ ラベル記録
// 重要：既読管理を有効にしたい場合は必ずtrueを指定して下さい
// 自動的に「読んだ」ラベルを記録するかどうかを指定します。
// この設定が false でなく true になっていると、ラベルを読むごとにシステム
// 変数 (sf.record) に
// trail_シナリオファイル名_ラベル名
// という変数名の変数に 1 が加算されます。
// たとえば first.ks の *start というラベルであれば sf.record.trail_first_start とい
// う変数名になります。まだ通過していないカ所では 未定義 ( undefined として見なされ
// ます ) になっています。
//
// 次のラベルに到達した時に ラベルの終了と見なされます。
// 吉里吉里/KAGとは仕様が異なりますのでご注意下さい。
// つまり、jump で他のシナリオファイルにジャンプしただけでは、記録されません。
// シナリオファイルの最初にラベルを配置しておくと記録されます
;autoRecordLabel = false;

// ◆ 既読管理
// 既読管理に関連する設定です
// 以下を有効にするには autoRecordLabel に trueを指定する必要があります
// 未読スキップを有効にするかどうかを指定します。 true を指定すると有効です
;unReadTextSkip = false 　

//既読のテキストの色(0x000000形式)を変更できます。default を指定すると既読テキストでも色は変わりません。
;alreadyReadTextColor = 0x87cefa

// ◆ 初期状態の前景レイヤの数
// 必要なければ 0 を指定してかまいません。
// 数が多いと速度が低下したりメモリを消費しますので、必要以上に大きな数を指
// 定しない方が良いでしょう。
// laycount タグでシナリオ内でも変更できます。
;numCharacterLayers = 3;


// ◆ 前景レイヤの左右中心位置指定
// +---------+
// |         |
// | |  |  | |
// | |  |  | |
// +---------+
// image タグあるいは img タグの pos 属性で指定する前景レイヤの 位置名 (
// left や lecft_center など ) とそれぞれに対応する 中心位置 ( x 座標 ) を
// 指定します。;scPositionX.位置名 = 中心位置; の形式で指定します。
;scPositionX.left = 160;
;scPositionX.left_center = 240;
;scPositionX.center = 320;
;scPositionX.right_center = 400;
;scPositionX.right = 480;


// 簡易な記号
// ( pos 属性に指定する left, left_center, center, right_center, right を
//  それぞれ l, lc, c, rc, r でも指定できるように別名を定義します )
;scPositionX.l = scPositionX.left;
;scPositionX.lc = scPositionX.left_center;
;scPositionX.c = scPositionX.center;
;scPositionX.rc = scPositionX.right_center;
;scPositionX.r = scPositionX.right;


// ◆ 初期状態のメッセージレイヤの数
// 前景レイヤと違って、0 を指定することはできません。これも必要な数だけ確保
// するようにすべきです。laycount タグでシナリオ内でも変更できます。
;numMessageLayers = 2;


// ◆ 初期状態でメッセージレイヤを表示するかどうか
// true を指定するとメッセージレイヤ0が初期状態で表示状態になりますが、
// false を指定すると初期状態ではすべてのメッセージレイヤは初期状態で非表示
// になります。
;initialMessageLayerVisible = true;


// ◆ 左右上下マージン
// マージン (余白) を pixel 単位で指定します。メッセージ枠用の画像を指定し
// た場合は、メッセージ枠の表示範囲内に設定する必要があります。
// これらは、position タグの marginl, maringt, marginr, marginb 属性に対応
// します。
;marginL = 8; // 左余白
;marginT = 8; // 上余白
;marginR = 8; // 右余白
;marginB = 8; // 下余白


// ◆ 初期位置
// これらは、position タグのそれぞれ left top width height の属性に対応しま
// す。
;ml = 16;  // 左端位置
;mt = 16;  // 上端位置
;mw = 960-32;   // 幅
;mh = 640-32;   // 高さ


// ◆ 「デバッグ」
// ここをtrueにしておくことでブラウザのコンソールログに各種値が出力されるようになります
//　ゲームリリース時は必ずfalseにしておきましょう

;debugMenu.visible = true;


//-------------------------------------------- メッセージレイヤの設定 -----

// ◆ メッセージレイヤの色と不透明度
// frameColor には 0xRRGGBB 形式で ( RR GG BB はそれぞれ 2 桁の 16 進数)
// メッセージレイヤの色を指定します。frameOpacity には 0 ～ 255 の数値で、
// 不透明度を指定します。メッセージ枠用の画像が指定されている場合は無効で
// す。
;frameColor = 0x000000; // position タグの color 属性に相当
;frameOpacity = 128;  // position タグの opacity 属性に相当



// ◆ 自動改行/改ページ
// true を設定すると、行末での自動改行、ページ末での自動改ページが行われま
// す。false を設定するとこれらが行われない他、禁則処理等もされなくなりま
// す。
;defaultAutoReturn = true;


// ◆ 右文字マージン （未実装）
// 禁則処理用にあけておく右端の文字数を指定します。
// (縦書きモードでは下端の文字数であると解釈されます)
;marginRCh = 2;


// ◆ 文字の大きさ
// デフォルトの文字の大きさ ( 高さ ) を pixel 単位で指定します。
;defaultFontSize = 28;  // deffont タグの size 属性に相当


// ◆ 行間
// 行間を pixel 単位で指定します。
;defaultLineSpacing = 8; // defstyle タグの linespacing 属性に相当

// ◆ 字間
// 字間を pixel 単位で指定します。
// デフォルトは 0 で、正あるいは負のオフセットで指定します。
// 負の数値を指定すると字間が詰まります。正の数値を指定すると字間が空きま
// す。
;defaultPitch = 0; // defstyle タグの pitch 属性に相当


// ◆ 文字の書体
// デフォルトのフォント名を指定します。
// この設定はシステム変数に記録されて、次回起動時に引き継がれるので、
// userFace の設定を変更し、適用したい場合はシステム変数ファイル
// カンマで区切って複数のフォントを指定することができます。その場合は、最初
// の方に書いたフォントが存在すれば、優先されます。
;userFace = Quicksand, 游ゴシック体, "Yu Gothic", YuGothic, "ヒラギノ角ゴシック Pro", "Hiragino Kaku Gothic Pro", メイリオ, Meiryo, Osaka, "ＭＳ Ｐゴシック", "MS PGothic", sans-serif, Arial;


// ◆ 文字の色
// デフォルトの文字の色を 0xRRGGBB 形式で指定します。
;defaultChColor = 0xffffff;  // deffont タグの color 属性に相当


// ◆ 文字をボールドにするか
// する場合は true, しない場合は false を指定します。
;defaultBold = false; // deffont タグの bold 属性に相当


// ◆ ルビサイズ　（未実装）
// ルビサイズを pixel 単位で指定します。
;defaultRubySize = 10; // deffont タグの rubysize に相当


// ◆ ルビ の表示オフセット（未実装）
// 負の数を指定するとその pixel 数分、本文に近い位置に表示されます。
;defaultRubyOffset = -2; // deffont タグの rubyoffset に相当


// ◆ 文字のアンチエイリアス効果をするか（なめらかな文字表現）
// これはゲーム全体の文字に適応されます
// 0:無効　1:弱めのアンチエイリアス効果　2:強めのアンチエイリアス効果
;defaultAntialiased = 1;


// ◆ 影を描画するか
// する場合は true, しない場合は false を指定します。
// 注意：文字の縁取りと同時に使用することはできません。その場合、影は無効になります。
;defaultShadow = false;  // deffont タグの shadow 属性に相当

// ◆ 影の色
// 影の色を 0xRRGGBB 形式で指定します。
;defaultShadowColor = 0x000000;  // deffont タグの shadowcolor に属性に相当

// ◆ 縁取りをするか
// する場合は true, しない場合は false を指定します。
;defaultEdge = false;  // deffont タグの edge 属性に相当

// ◆ 縁取りの色
// 縁取りの色を 0xRRGGBB 形式で指定します。
;defaultEdgeColor = 0x000000;  // deffont タグの edgecolor に属性に相当


// ◆ リンクの強調色 （未実装）
// リンクを選択したときに出る半透明矩形のデフォルトの色です。
;defaultLinkColor = 0x0080ff;  // link タグの color 属性に相当


// ◆ リンクの不透明度　（未実装）
// リンクを選択したときに出る半透明矩形の不透明度です。
;defaultLinkOpacity = 64;


// ◆ 縦書きモード
// メッセージレイヤを標準で縦書きモードにする場合は false ではなく true を
// 指定してください。
;vertical = false;


//---------------------------------------------- キーボードによるボタン選択の設定 -----

// ◆ キーボードで各種ボタンを選択できるようにするかどうか
// キーボードでボタンを選択できるようにするなら true、選択できるようにしたくないなら false を指定します。
// ※キーコンフィグの設定（system/KeyConfig.js）も参照してください。
// 　ボタンをキーボードで選択できるようにするためには、各種キーに focus_left などのアクションが設定されている必要があります。
// 　(設定例)
//     "37": "focus_left",  // ←
//     "38": "focus_up",    // ↑
//     "39": "focus_right", // →
//     "40": "focus_down",  // ↓
;useKeyFocus = true;


// ◆ キーボードの方向キーなどでボタンを選択したときに最初にどのボタンをフォーカスするか
// たとえば選択肢が縦に3つ並んでいる状況で下キーを押したとき、一番下のボタンがフォーカスされるようにするか、
// それとも下キーを押した場合でも固定で一番上のボタンがフォーカスされるようにするか、を設定できます。
// first : どの方向キーを押した場合でも、固定で一番上のボタンがフォーカスされるようにします。
// dir   : 上キーを押したときには一番上のボタンが、
//         下キーを押した場合には一番下のボタンがフォーカスされるようにします。
// dir-2 : ボタンが2個しかない場合は方向キーどおりにフォーカス（dir）、
//         選択肢が3個以上ある場合は固定で先頭のボタンがフォーカス（first）されるようにします。
;firstKeyFocusType = first;


// ◆ キーボードでボタンを選択したときに仮のマウスカーソル画像を表示するかどうか
// true  : 仮のマウスカーソルを表示する
// false : 仮のマウスカーソルを表示しない
;keyFocusWithMouseCursor = true;

// ◆ キーボードでボタンを選択したときに「ボタンにマウスカーソルを乗せたときのボタンのデザイン変化」を適用するかどうか。
// たとえば [glink] の上に実際のマウスカーソルを乗せると「ボタンが明るくなる」などのデザイン変化が起こりますが、
// このデザインの変化を「キーボードでボタンを選択したとき」にも適用するかどうかの設定です。
// true  : デザイン変化を適用する
// false : デザイン変化を適用しない
;keyFocusWithHoverStyle = true;

// ◆ キーボードでボタンを選択したときのアウトラインの太さ
// これに 0 を指定すると、キーボードでボタンを選択したときに表示されるアウトライン（外枠の線）がなくなります。
// ユーザービリティに鑑みると、アウトラインがあったほうがわかりやすいでしょう。
;keyFocusOutlineWidth = 0;

// ◆ キーボードでボタンを選択したときのアウトラインのスタイル
// solid  : 1本線
// double : 2本線
// dashed : 角が四角い点線
// dotted : 角が丸い点線
;keyFocusOutlineStyle = solid;

// ◆ キーボードでボタンを選択したときのアウトラインの色
// 下記のような指定にも対応します。下記は半透明の白色を指定した例です。
// rgba(255, 255, 255, 0.5)
;keyFocusOutlineColor = 0x000000;

// ◆ キーボードでボタンを選択したときのアウトラインのアニメーション
// none             : アニメーションなし
// flash            : 滑らかな点滅
// flash_moimentary : 瞬間的な点滅
;keyFocusOutlineAnim = flash_momentary;

// ◆ キーボードでボタンを選択したときのアウトラインのアニメーション時間（ミリ秒）
;keyFocusOutlineAnimDuration = 2000;



//---------------------------------------------- ゲームパッド操作の設定 -----

// ◆ ゲームパッドによる操作を有効にするかどうか
// 有効にするなら true を、無効にするなら false を指定します。
;useGamepad = true;



//---------------------------------------------- その他の設定 -----

// ◆ ゲーム未保存時にプレイヤーがゲームを閉じようとしたときに警告を出す機能を有効化するかどうか
// 有効にするなら true を、無効にするなら false を指定します。
// ここを有効にしたうえで [closeconfirm_on] タグをシナリオに配置してください。
;useCloseConfirm = true;


// ◆ 黒帯のクリックでもテキストを進められるようにするかどうか
// 黒帯（ゲーム画面の縦横比とプレイヤーのディスプレイの縦横比が合っていないときなど画面の周囲に表示される余白）を
// クリックしたときにもテキストを進められるようにするなら true を、しないなら false を指定します。
;offscreenClickable = true;
